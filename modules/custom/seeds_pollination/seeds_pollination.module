<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Functions to support adminimal admin toolbar.
 */

/**
 * Implements HOOK_form_node_form_alter().
 */
function seeds_pollination_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Hide title label in all content types and make it as a placeholder.
  $title = $form['title']['widget'][0]['value']['#title'];
  $form['title']['widget'][0]['value']['#title_display'] = 'hidden';
  $form['title']['widget'][0]['value']['#placeholder'] = $title;
}

/**
 * Implements of HOOK_form_alter().
 */
function seeds_pollination_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  // If the form is an entity bundle form and the type is not 'delete'.
  if ($form_object instanceof EntityForm && $form_object->getOperation() != "delete") {

    // Get current status of container.
    $config = \Drupal::service('config.factory')->getEditable('seeds.container_settings');

    // Get the current entity, which is a bundle entity.
    $entity = $form_object->getEntity();

    // Get the bundle of this bundle entity type.
    $definition = \Drupal::entityTypeManager()->getDefinition($entity->getEntityTypeId());
    $bundle_of = $definition->get('bundle_of') ?: $entity->id();
    $form_state->set('bundle_of', $bundle_of);

    // Check if the entity has a canonical route.
    $route_provider = \Drupal::service('router.route_provider');
    $canonical = $route_provider->getRoutesByNames(["entity.{$bundle_of}.canonical"]);

    // If there is no canonical route, ignore.
    // Also, we exclude block_content entities, becuase it has a canonical link, but it is used to edit
    // the entity instead of it being a normal landing page.
    if (empty($canonical) || $bundle_of == "block_content") {
      return;
    }

    // Get the value.
    $container_settings = (bool) $config->get("{$bundle_of}_{$entity->id()}");

    // Define field set in additional settings group.
    $form['container_settings'] = [
      '#type' => 'details',
      '#title' => t('Container settings'),
      '#group' => isset($form['additional_settings']) ? 'additional_settings' : 'advanced',
    ];

    // Add checkbox option.
    $form['container_settings']['fluid_container'] = [
      '#type' => 'checkbox',
      '#title' => t('Fluid Container'),
      '#default_value' => $container_settings,
    ];

    // Add the custom submit to the form.
    $form['actions']['submit']['#submit'][] = 'container_settings_form_submit';
  }
}

/**
 * Implements of HOOK_form_submit().
 */
function container_settings_form_submit(&$form, FormStateInterface &$form_state) {
  // Get container configations.
  $config = \Drupal::service('config.factory')->getEditable('seeds.container_settings');

  // Get the 'bundle_of' value.
  $bundle_of = $form_state->get('bundle_of');

  // Get the entity bundle.
  $entity = $form_state->getFormObject()->getEntity();

  // Get the submitted value.
  $value = (bool) $form_state->getValue('fluid_container');

  // Set and save to configuration.
  $config->set("{$bundle_of}_{$entity->id()}", $value)->save();
}

/**
 * Implements of HOOK_preprocess_page()
 */
function seeds_pollination_preprocess_page(&$vars) {
  $config = \Drupal::service('config.factory')->getEditable('seeds.container_settings');

  $route_match = \Drupal::routeMatch();
  $parameters = $route_match->getParameters();

  foreach ($parameters as $parameter) {
    if ($parameter instanceof EntityInterface) {
      $vars['is_full_width'] = (bool) $config->get("{$parameter->getEntityTypeId()}_{$parameter->bundle()}");
    }
  }
}
