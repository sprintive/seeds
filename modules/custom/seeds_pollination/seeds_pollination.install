<?php

/**
 * @file
 */

use Drupal\Core\Serialization\Yaml;

/**
 * Install 'seeds_development' if 'views_ui' is enabled.
 */
function seeds_pollination_update_8101(&$sandbox) {
  $module_handler = \Drupal::moduleHandler();
  if ($module_handler->moduleExists('views_ui')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['seeds_development']);
  }
}

/**
 * Add 'translations.yml' file.
 */
function seeds_pollination_update_8102(&$sandbox) {
  $content = [
    'ar' => [
      'Example' => 'Ù…Ø«Ø§Ù„',
    ],
  ];
  $translations_path = DRUPAL_ROOT . '/translations.yml';
  if (!file_exists($translations_path)) {
    file_put_contents($translations_path, Yaml::encode($content));
  }
}

/**
 * Enable the new features on seeds pollination.
 */
function seeds_pollination_update_8103(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
  $config->set('display_unmasquerade_button', '1')->set('replace_permissions_form_route', '1')->save();
}

/**
 * Enable 'description' fields on all config entities.
 */
function seeds_pollination_update_8104(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
  $config->set('description_is_required_for_config_entities', '1')->save();
}

/**
 * Reupdates the seeds_pollination config.
 */
function seeds_pollination_update_8105(&$sandbox) {
  $path = DRUPAL_ROOT . '/' . \Drupal::moduleHandler()->getModule('seeds_pollination')->getPath() . '/config/install/seeds_pollination.settings.yml';
  $warn = FALSE;
  $content = file_get_contents($path);
  if ($content) {
    $data = Yaml::decode($content);
    $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
    if (is_array($data)) {
      $config->setData($data)->save();
    } else {
      $warn = TRUE;
    }
  } else {
    $warn = TRUE;
  }

  if ($warn) {
    \Drupal::messenger()->addWarning('Failed to read config/install/seeds_polination.settings.yml');
  }
}

/**
 * Re-Reupdates the seeds_pollination config again.
 */
function seeds_pollination_update_8106(&$sandbox) {
  $path = DRUPAL_ROOT . '/' . \Drupal::moduleHandler()->getModule('seeds_pollination')->getPath() . '/config/install/seeds_pollination.settings.yml';
  $warn = FALSE;
  $content = file_get_contents($path);
  if ($content) {
    $data = Yaml::decode($content);
    $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
    if (is_array($data)) {
      $config->setData($data)->save();
    } else {
      $warn = TRUE;
    }
  } else {
    $warn = TRUE;
  }

  if ($warn) {
    \Drupal::messenger()->addWarning('Failed to read config/install/seeds_polination.settings.yml');
  }
}

/*
 * Enable forcing small letter extensions for file uploads.
 */
function seeds_pollination_update_8107(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
  $config->set('small_letters_extension', '1')->save();
}

/**
 * Enable 'disable user 1 edit' config
 *
 */
function seeds_pollination_update_8108() {
  $config = \Drupal::configFactory()->getEditable('seeds_pollination.settings');
  $config->set('disable_user_1_edit', '1')->save();

  // Check if the module already exists.
  if (\Drupal::moduleHandler()->moduleExists('disable_user_1_edit')) {
    \Drupal::messenger()->addWarning(t('The module "disable_user_1_edit" will be disabled now, "seeds_pollination" already provides this feature. Check the configuration form of "seeds_pollination"'));
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->uninstall(['disable_user_1_edit']);
  }
}

/**
 * Init new 'drush.yml' file.
 *
 */
function seeds_pollination_update_8109() {
  $module_path = \Drupal::moduleHandler()->getModule('seeds_pollination')->getPath();
  $drush_yml_path = $module_path . '/drush.yml';
  $root = $GLOBALS['ROOT'];

  // Check if the previous folder has a composer.json file.
  $frags = explode('/', $root);
  array_pop($frags);
  $previous_folder = implode('/', $frags);

  if (file_exists($previous_folder . '/composer.json')) {
    $root = $previous_folder;
  }

  if (!file_exists($root . '/drush')) {
    mkdir($root . '/drush');
  }

  $success = copy($drush_yml_path, $root . '/drush/drush.yml');

  if (!$success) {
    throw new \Exception(sprintf('Failed to copy from %s to %s', $drush_yml_path, $root . '/drush/drush.yml'));
  }
}

/**
 * Enable media library edit on all media library widgets.
 *
 */
function seeds_pollination_update_9001() {
  // Load all form displays.
  /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay[] $form_displays */
  $form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadMultiple();
  // Foreach the components, check if it is using media_library
  foreach ($form_displays as $form_display) {
    $components = $form_display->getComponents();
    $has_changed = FALSE;
    foreach ($components as $component_name => $component) {
      if ($component['type'] == 'media_library_widget') {
        // Set third party setting 'media_library_edit' to true.
        $component['third_party_settings']['media_library_edit']['show_edit'] = TRUE;
        $form_display->setComponent($component_name, $component);
        $has_changed = TRUE;
      }
    }

    if ($has_changed) {
      $form_display->save();
    }
  }
}