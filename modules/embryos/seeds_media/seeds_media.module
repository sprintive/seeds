<?php

/**
 * @file
 * The module file for seeds_media.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function seeds_media_theme($existing, $type, $theme, $path) {
  return [
    'blazy_loader' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function seeds_media_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (strpos($form_id, 'entity_browser') === 0) {
    $form['#attached']['library'][] = 'seeds_media/media_pollination';
  }
}

/**
 * Prepares variables for entity embed container templates.
 *
 * Default template: entity-embed-container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes, #children.
 */
function seeds_media_preprocess_entity_embed_container(&$variables) {
  if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url'])) {
    $link = UrlHelper::filterBadProtocol($variables['element']['#context']['data-entity-embed-display-settings']['link_url']);
    if (!UrlHelper::isExternal($link)) {
      $link = 'internal:/' . ltrim($link, '/');
    }
    $link = Url::fromUri($link);
    $attributes = [];
    if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url_target']) && $variables['element']['#context']['data-entity-embed-display-settings']['link_url_target'] == 1) {
      $attributes = ['attributes' => ['target' => '_blank']];
    }
    $variables['children'] = [
      [
        '#type' => 'link',
        '#title' => $variables['children'],
        '#options' => $attributes,
        '#url' => $link,
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function seeds_media_preprocess_blazy(&$variables) {

  // Override blazy loader.
  $blazy_config = \Drupal::config('seeds_media.settings')->get('blazy');
  \Drupal::service('renderer')->addCacheableDependency($variables, $blazy_config);
  if (@$blazy_config['override']) {
    $image_url = $blazy_config['loader'];
    $background_color = $blazy_config['background_color'];
    $variables['image']['#theme_wrappers'] = [
      'blazy_loader' => [
        '#attributes' => [
          'style' => "background-image: url($image_url);",
        ],
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function seeds_media_preprocess_blazy_loader(&$variables) {
  $blazy_config = \Drupal::config('seeds_media.settings')->get('blazy');
  $background_color = $blazy_config['background_color'];
  $variables['background_attributes'] = [
    'style' => "background-color: $background_color;",
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function seeds_media_library_info_alter(&$libraries, $extension) {
  // Replace blazy loader css with the theme css.
  $blazy_override_enabled = \Drupal::config('seeds_media.settings')->get('blazy')['override'];
  if ($extension == "blazy" && $blazy_override_enabled) {
    $libraries["loading"]["css"]["component"] = ["/" . drupal_get_path("theme", "seeds_coat") . "/css/blazy-loader.css" => []];
  }
}
