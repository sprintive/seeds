<?php

/**
 * @file
 * The module file for seeds_media.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function seeds_media_theme($existing, $type, $theme, $path)
{
  return [
    'blazy_loader' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function seeds_media_form_alter(&$form, FormStateInterface &$form_state, $form_id)
{
  if (strpos($form_id, 'entity_browser') === 0) {
    $form['#attached']['library'][] = 'seeds_media/media_pollination';
  }
}

/**
 * Prepares variables for entity embed container templates.
 *
 * Default template: entity-embed-container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes, #children.
 */
function seeds_media_preprocess_entity_embed_container(&$variables)
{
  if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url'])) {
    $link = UrlHelper::filterBadProtocol($variables['element']['#context']['data-entity-embed-display-settings']['link_url']);
    if (!UrlHelper::isExternal($link)) {
      $link = 'internal:/' . ltrim($link, '/');
    }
    $link = Url::fromUri($link);
    $attributes = [];
    if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url_target']) && $variables['element']['#context']['data-entity-embed-display-settings']['link_url_target'] == 1) {
      $attributes = ['attributes' => ['target' => '_blank']];
    }
    $variables['children'] = [
      [
        '#type' => 'link',
        '#title' => $variables['children'],
        '#options' => $attributes,
        '#url' => $link,
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function seeds_media_preprocess_blazy(&$variables)
{

  // Override blazy loader.
  $blazy_config = \Drupal::config('seeds_media.settings')->get('blazy');
  \Drupal::service('renderer')->addCacheableDependency($variables, $blazy_config);
  if (@$blazy_config['override']) {
    $image_url = $blazy_config['loader'];
    $background_color = $blazy_config['background_color'];
    $variables['image']['#theme_wrappers'] = [
      'blazy_loader' => [
        '#attributes' => [
          'style' => "background-image: url($image_url);",
        ],
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function seeds_media_preprocess_blazy_loader(&$variables)
{
  $blazy_config = \Drupal::config('seeds_media.settings')->get('blazy');
  $background_color = $blazy_config['background_color'];
  $variables['background_attributes'] = [
    'style' => "background-color: $background_color;",
  ];
}

/**
 * Implements hook_library_info_alter().
 */
function seeds_media_library_info_alter(&$libraries, $extension)
{
  // Replace blazy loader css with the theme css.
  $blazy_override_enabled = \Drupal::config('seeds_media.settings')->get('blazy')['override'];
  if ($extension == "blazy" && $blazy_override_enabled) {
    $libraries["loading"]["css"]["component"] = ["/" . drupal_get_path("theme", "seeds_coat") . "/css/blazy-loader.css" => []];
  }
}



/**
 * Implements hook_form_FORM_ID_alter().
 */
function seeds_media_form_media_image_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  /** @var \Drupal\media\MediaInterface $media */
  $media = $form_state->getFormObject()->getEntity();
  $current_user = \Drupal::currentUser();

  // Check if the media is a default one, and deny access
  if ((bool) $media->is_default->value && !$current_user->hasPermission('bybass default media access')) {
    $form = [
      '#theme' => 'status_messages',
      '#message_list' => [
        'error' => [
          t("You can't edit this media because it is assigned as default, please press remove this media from the selection and create a new one."),
        ],
      ],
    ];
    return;
  }

  // Add the checkbox if the user has permission
  if ($current_user->hasPermission('assign default medias')) {
    $form['default_media'] = [
      '#type' => 'checkbox',
      '#title' => t("Default media"),
      '#description' => t("Set this to true if you don't want accidental edits from the end users."),
      '#weight' => 98,
      '#default_value' => (bool) $media->is_default->value,
    ];
    $form["actions"]["submit"]["#submit"][] = 'seeds_media_default_media';
  }
}

/**
 * Callback on media edit form
 *
 */
function seeds_media_default_media(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  /** @var \Drupal\media\MediaInterface $media */
  $media = $form_state->getFormObject()->getEntity();
  $is_default = $form_state->getValue('default_media');
  try {
    $media->set('is_default', (bool) $is_default);
    $media->save();
  } catch (InvalidArgumentException $e) {
    \Drupal::messenger()->addWarning(t("Couldn't set \"is_default\" value on media."));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function seeds_media_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type)
{
  $fields = [];
  if ($entity_type->id() == 'media') {
    $fields['is_default'] = \Drupal\Core\Field\BaseFieldDefinition::create('boolean')
      ->setLabel("Is Default")
      ->setDescription("A boolean that indicates if the media is a default one")
      ->setDefaultValue(FALSE)
      ->setRequired(TRUE);
  }
  return $fields;
}
