<?php

/**
 * @file
 * The module file for seeds_media.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function seeds_media_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (strpos($form_id, 'entity_browser') === 0) {
    $form['#attached']['library'][] = 'seeds_media/media_pollination';
  }
}

/**
 * Prepares variables for entity embed container templates.
 *
 * Default template: entity-embed-container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #attributes, #children.
 */
function seeds_media_preprocess_entity_embed_container(&$variables) {
  if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url'])) {
    $link = UrlHelper::filterBadProtocol($variables['element']['#context']['data-entity-embed-display-settings']['link_url']);
    if (!UrlHelper::isExternal($link)) {
      $link = 'internal:/' . ltrim($link, '/');
    }
    $link = Url::fromUri($link);
    $attributes = [];
    if (!empty($variables['element']['#context']['data-entity-embed-display-settings']['link_url_target']) && $variables['element']['#context']['data-entity-embed-display-settings']['link_url_target'] == 1) {
      $attributes = ['attributes' => ['target' => '_blank']];
    }
    $variables['children'] = [
      [
        '#type' => 'link',
        '#title' => $variables['children'],
        '#options' => $attributes,
        '#url' => $link,
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function seeds_media_form_media_image_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\media\MediaInterface $media */
  $media = $form_state->getFormObject()->getEntity();
  $current_user = \Drupal::currentUser();
  /** @var \Drupal\seeds_media\MediaHelper $media_helper */
  $media_helper = \Drupal::service('seeds_media.helper');

  // Check if the media is a default one, and deny access.
  if ((bool) $media->is_default->value && !$current_user->hasPermission('bybass default media access')) {
    $form = [
      '#theme' => 'status_messages',
      '#message_list' => [
        'error' => [
          t("You can't edit this media because it is assigned as default, please press remove to remove this media from the selection and create a new one."),
        ],
      ],
    ];
    return;
  }

  // Check if the media is used anywhere.
  $check_usability = (bool) \Drupal::config('seeds_media.settings')->get('check_media_usability');
  $current = \Drupal::request()->query->get('status') == 'current';
  if ($check_usability && $media_helper->mediaUseablity($media) > ($current ? 1 : 0)) {
    $form['usebility_warning'] = [
      '#theme' => 'status_messages',
      '#weight' => -1000,
      '#message_list' => [
        'warning' => [
          t("This media is being used somewhere in this website, be careful when editing this media, as changing it could result in unexpected behaviors."),
        ],
      ],
    ];
  }

  // Add the checkbox if the user has permission.
  if ($current_user->hasPermission('assign default medias')) {
    $form['default_media'] = [
      '#type' => 'checkbox',
      '#title' => t("Default media"),
      '#description' => t("Set this to true if you don't want accidental edits from the end users."),
      '#weight' => 98,
      '#default_value' => (bool) $media->is_default->value,
    ];
    $form["actions"]["submit"]["#submit"][] = 'seeds_media_default_media';
  }
}

/**
 * Callback on media edit form.
 */
function seeds_media_default_media(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\media\MediaInterface $media */
  $media = $form_state->getFormObject()->getEntity();
  $is_default = $form_state->getValue('default_media');
  try {
    $media->set('is_default', (bool) $is_default);
    $media->save();
  } catch (InvalidArgumentException $e) {
    \Drupal::messenger()->addWarning(t("Couldn't set \"is_default\" value on media."));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function seeds_media_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'media') {
    $fields['is_default'] = BaseFieldDefinition::create('boolean')
      ->setLabel("Is Default")
      ->setDescription("A boolean that indicates if the media is a default one")
      ->setDefaultValue(FALSE)
      ->setRequired(TRUE);
  }
  return $fields;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function seeds_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context["widget"]->getPluginId() == "media_library_widget") {
    foreach ($element["selection"] as &$media_selection) {
      $form_object = $form_state->getFormObject();
      $status = "new";

      // Check if it is a media selection.
      if (isset($media_selection['#theme']) && $element["selection"][0]["#theme"] == "media_library_item__widget") {
        $media_id = $media_selection["target_id"]["#value"];
        if ($form_object instanceof EntityFormInterface) {
          $current_entity = $context['items']->getEntity();

          // If the entity is old, we get its values, to accurately determine if the media is used elsewhere.
          if (!$current_entity->isNew()) {
            $current_entity = $current_entity->load($current_entity->id());
            $field_name = $context['items']->getName();
            $default_medias = explode(', ', $current_entity->{$field_name}->getString());

            // Use a query to talk to the media edit form.
            if (in_array($media_id, $default_medias)) {
              $status = "current";
            }
          }
        }
        $media_selection["edit_button"]["#attributes"]["href"] .= "?status=$status";
      }
    }
  }
}